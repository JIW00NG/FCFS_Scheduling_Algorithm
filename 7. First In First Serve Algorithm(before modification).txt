/*
FCFS SCHEDULING은 도착한 순서대로 CPU를 할당하는 비선점형 방식으로 선입선출 스케줄링이라고도 한다. 프로세스들의 도착시간이 빠를 수록 실행순서가 빨라지는 알고리즘으로 FIFO는 큐를 가리키는 말이기 때문에 FCFS라고 한다.
초기 일괄작업 시스템에서 사용하였었고, 비선점형 방식이기 때문에 실행중인 프로세스가 끝나야만 다음 프로세스를 실행할 수 있다. 모든 프로세스의 우선순위는 동일하다.
그러나 콘보이효과 때문에 효율성이 떨어지는 문제가 있다.

이 코드는 최대 10개의 프로세스를 실행 가능하며, 코드의 끝부분을 보면 실행순서대로 실행시간과 대기시간을 출력하는 간트 차트를 출력하는 부분이 존재한다.

수정전 코드에 stime[]은 현재 사용되지 않으며, b[] 는 프로세스의 burst time, w[] 는 프로세스의 waiting time을 나타내는 변수, avg는 대기시간 평균을 구하기위한 변수이며 평균은 소수점이 나올 수 있기 때문에 float형으로 선언되었다.

실행 순서:
1. clrscr() 로 화면을 깨끗하게 지우고, 몇 개의 프로세스를 처리할지 n에 입력 받음
2. 각각의 프로세스들의 burst time을 입력 받음
3. 처음 실행하는 프로세스의 waiting time을 0으로 초기화하고 출력
4. 두번째부터 실행하는 프로세스들의 대기시간을 출력하고 avg에 모든 대기시간 합을 계산
5. total waiting time과 average waiting time 출력
6. 프로세스의 실행순서대로 burst time과 waiting time 간트 차트 출력 (waiting time 출력 시 1초의 간격을 두고 출력)
7. getch() 으로 아무 입력이나 기다리며 입력을 받으면 종료

*/

#include<stdio.h>
#include<conio.h>
#include<dos.h>

void main()
{

// n: 입력받을 프로세스의 수
// b[10]: 프로세스들의 실행시간으로 최대 10개의 프로세스 관리 가능
// w[10]: 프로세스들의 대기시간으로 최대 10개의 프로세스 관리 가능
// i,j: for문을 위한 변수
// h: '' 출력을 위한 변수
 int n,b[10],w[10],i,j,h;

//stime[10]은 현재 사용되지 않음
 int stime[10];

// avg: 대기시간의 평균을 구하기 위한 변수
 float avg=0;

// 화면에 있는것들을 지우는 함수
 clrscr();

 printf("\n\tJOB SCHEDULING ALGORITHM[FCFS]");
 printf("\n\t*****************************************************\n");

// 총 몇개의 프로세스를 처리할지 변수 n에 입력받음
 printf("\nEnter howmany jobs:");
 scanf("%d",&n);

// 각각 프로세스별 실행시간 입력받음
 printf("\nEnter burst time for corresponding job....\n");
 for(i=0;i<n;i++)
 {
  printf("\nProcess %d:",i+1);
  scanf("%d",&b[i]);
 }

// 처음실행하는 프로세스의 대기시간을 0으로 초기화
 w[0]=0;

// 처음실행하는 프로세스 대기시간 0이라고 출력
 printf("\nprocess 1 waiting time is 0");

//처음실행하는 프로세스를 뺀 나머지 프로세스들의 대기시간 출력
//avg에 프로세스들의 모든 대기시간 합 계산
 for(i=1;i<n;i++)
 {
  w[i]=b[i-1]+w[i-1];
  printf("\nProcess %d waiting time: %d",i+1,w[i]);
  avg+=w[i];
 }

//total waiting time 출력
 printf("\ntotal waiting time:%f",avg);

//average waiting time 출력
 printf("\n\nthe average waiting time is:%f\n",avg/n);
 printf("\nGaunt Chart\n***************************************\n\n\t");

// '' 출력을 위한 변수 설정
 h=22;

//프로세스의 실행순서대로 실행시간과 실행시간만큼 '' 출력
 for(i=0;i<n;i++)
 {
  printf("%d",b[i]);
  for(j=1;j<=b[i];j++)
   printf("%c",h);
 }
 printf("\n\t");

//프로세스의 실행순서대로 대기시간과 대기시간 만큼 '' 출력
 for(i=0;i<n;i++)
 {
  printf("%d",w[i]);
  for(j=1;j<=w[i];j++)
   printf("%c",h);

//1초간격으로 출력
  delay(1000);
 }

//아무 입력이나 기다림
getch();
}
